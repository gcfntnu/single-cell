#-*- mode:snakemake -*-
"""10xgenomics external data and reference/index builds
"""

from os.path import join

# config
10X_EXT = join(EXT_DIR, '10xgenomics')
10X_CONFIG = config.get('10xgenomics', {})
10X_DOCKER = 10X_CONFIG.get('docker', 'docker://gcfntnu/cellranger:3.0.0')
10X_PREBUILD = 10X_CONFIG.get('prebuilds', {})

GENE_BIOTYPES = 10X_CONFIG.get('gene_biotypes', [])
ORG = config.get('organism', 'homo_sapiens')

include:
    'ensembl.db'
include:
    'gencode.db'


rule cellranger_prebuilt_reference:
    params:
        url = 10X_PREBUILD[ORG],
        out = join(10X_EXT, 'reference', ORG, '10xgenomics')
    output:
        json = join(10X_EXT, 'reference', ORG, '10xgenomics', 'reference.json'),
        gtf = join(10X_EXT, 'reference', ORG, '10xgenomics', 'genes', 'genes.gtf'),
        fasta = join(10X_EXT, 'reference', ORG, '10xgenomics', 'fasta', 'genome.fa'),
        star_index = join(10X_EXT, 'reference', ORG,'10xgenomics', 'star', 'SA')
    shell:
        'curl {params.url} | tar xvz --strip-components=1 -C {params.out}'


rule cellranger_mkgtf:
    input:
        gtf = join(EXT_DIR, 'ensembl', 'genes.gtf')
    output:
        gtf = join(EXT_DIR, 'custom_ensembl', 'genes.gtf')
    params:
        attr = ' '.join(['--attribute=gene_biotype:{} '.format(b) for b in GENE_BIOTYPES])
    singularity:
        10X_DOCKER
    shell:
        'cellranger mkgtf '
        '{input.gtf} '
        '{output.gtf} '
        '{params.attr}'

rule cellranger_premirna_gtf:
    input:
        gtf = join(10X_INTERIM, 'ensembl.filtered.gtf')
    output:
        gtf = join(10X_INTERIM, 'ensembl.permirna.gtf')
    shell:
        """
        awk 'BEGIN{{FS="\t"; OFS="\t"}} $3 == "transcript"{{ $3="exon"; print}}' {input.gtf} > {output.gtf}
        """

rule cellranger_single_species_custom_ref:
    input:
        genome = join(EXT_DIR, 'ensembl', 'genome.fa'),
        filtered_gtf = rules.cellranger_mkgtf.output
    params:
        dummy_out = 'ensembl_' + ORG,
        out = join(10X_EXT, 'reference', ORG, 'custom_ensembl')
    output:
        json = join(10X_EXT, 'reference', ORG, 'custom_ensembl', 'reference.json'),
        gtf = join(10X_EXT, 'reference', ORG, 'custom_ensembl', 'genes', 'genes.gtf'),
        fasta = join(10X_EXT, 'reference', ORG, 'custom_ensembl', 'fasta', 'genome.fa'),
        star_index = join(10X_EXT, 'reference', ORG, 'custom_ensembl', 'star', 'SA')
    threads:
        48
    singularity:
        10X_DOCKER
    log:
        'logs/star_ensembl.Log.out'
    shell:
        'cellranger mkref '
        '--genome={params.dummy_out} '
        '--fasta={input.genome} '
        '--genes={input.filtered_gtf} '
        '--nthreads={threads} '
        '&& '
        'mv {params.dummy_out}/* {params.out}/ '
        '&& rmdir {params.dummy_out} '
        '&& mv Log.out {log}'
        
rule cellranger_multi_species_mkref:
    


rule cellranger_transcriptome:
    input:
        gtf = join(10X_EXT, 'reference', ORG, '{reference_db}', 'genes', 'genes.gtf'),
        genome = join(10X_EXT, 'reference', ORG, '{reference_db}', 'fasta', 'genome.fa')
    output:
        join(10X_EXT, 'reference', ORG, '{reference_db}', 'fasta', 'transcriptome.fa')
    shell:
        'gffread -w {output} -g {input.genome} {input.gtf}'


rule cellranger_whitelist:
    shell:
        'tar --extract --file=cellranger-3.0.0.tar.gz -O cellranger-3.0.0/cellranger-cs/3.0.0/lib/python/cellranger/barcodes/3M-february-2018.txt.gz | gunzip -c > 3M-february-2018.txt'
