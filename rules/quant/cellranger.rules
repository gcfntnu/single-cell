#-*- mode:snakemake -*-

import os
import re

extra_conf_fn = srcdir('cellranger.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

#config
ORG = config.get('organism', 'homo_sapiens')
CR_PROCESSED = join(QUANT_PROCESSED, 'cellranger')
CR_INTERIM = join(QUANT_INTERIM, 'cellranger')
CR_CONF = config['quant']['cellranger']

if not '10xgenomics' in REF_DIR:
    CR_REF_DIR = join(REF_DIR, 'cellranger')
else:
    CR_REF_DIR = REF_DIR

def input_fastq_path(wildcards, input):
    R1 = get_filtered_fastq_R1(wildcards)
    if config['filter']['skip']:
        fq_dir = config['fastq_dir']
    else:
        fq_dir = join(FILTER_INTERIM, 'fastp_10x')
    if not fq_dir.endswith(os.path.sep):
        fq_dir += os.path.sep
    pths = set()
    for r1 in R1:
        pth, bn = os.path.split(r1)
        pths.add(pth)
    return ','.join(list(pths))
    
rule cellranger_quant_:
    input:
        R1 = get_filtered_fastq_R1,
        R2 = get_filtered_fastq_R2,
        genome = join(CR_REF_DIR, 'fasta', 'genome.fa')
    params:
        input = input_fastq_path,
        id = '{sample}',
        outdir = CR_INTERIM,
        sample = '{sample}',
        genome_dir = CR_REF_DIR,
        ncells = config['quant']['cellranger']['ncells'],
        chemistry = LIBPREP['cellranger']['chemistry'],
        extra_args = '--nosecondary --nopreflight --disable-ui '
    threads:
        48
    output:
        summary = join('{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join('{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join('{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join('{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = join('{sample}', 'outs', 'raw_feature_bc_matrix', 'barcodes.tsv.gz'),
        filt_mtx = join('{sample}', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    singularity:
        CR_CONF['docker']
    benchmark:
        'benchmark/cellranger/{sample}-cellranger-count.txt'
    shell:
        'rm -rf {params.id} && '
        'cellranger count '
        '--localcores {threads} '
        '--fastqs {params.input} '
        '--id {params.id} '
        '--sample {params.sample} '
        '--transcriptome {params.genome_dir} '
        '--expect-cells {params.ncells} '
        '--chemistry {params.chemistry} '
        '{params.extra_args} '

rule cellranger_quant:
    input:
        rules.cellranger_quant_.output.summary,
        rules.cellranger_quant_.output.raw_h5, 
        rules.cellranger_quant_.output.filt_h5,
        rules.cellranger_quant_.output.mol_h5,
        rules.cellranger_quant_.output.raw_mtx, 
        rules.cellranger_quant_.output.filt_mtx
    output:
        summary = join(CR_INTERIM, '{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join(CR_INTERIM, '{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join(CR_INTERIM, '{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = join(CR_INTERIM, '{sample}', 'outs', 'raw_feature_bc_matrix', 'barcodes.tsv.gz'),
        filt_mtx = join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    params:
        outdir = CR_INTERIM,
        sample = '{sample}',
    threads:
        1
    shell:
        'cp -r {params.sample} {params.outdir} && '
        'rm -rf {params.sample} '

rule cellranger_aggr_csv:
    input:
        sample_info = 'data/processed/sample_info.txt',
        mol_h5 = expand(rules.cellranger_quant.output.mol_h5, sample=SAMPLES)
    output:
        csv = join(CR_INTERIM, 'aggr.csv')
    run:
        import pandas as pd
        batch = config['quant']['aggregate'].get('batch')
        df = pd.read_csv(input.sample_info, sep='\t')
        df.index = df['Sample_ID']
        valid_samples = list(df['Sample_ID'])
        with open(output.csv, 'w') as aggr:
            if batch is not None:
                assert(batch in df.columns)
                aggr.write('library_id,molecule_h5,batch\n')
            else:
                aggr.write('library_id,molecule_h5\n')
            for mol_h5 in input.mol_h5:
                sample = mol_h5.split(os.path.sep)[-3]
                if sample in valid_samples:
                    if batch is not None:
                        aggr.write('{},{},{}\n'.format(sample, mol_h5, df.loc[sample][batch]))
                    else:
                        aggr.write('{},{}\n'.format(sample, mol_h5)) 
                else:
                    logger.error('{} not in {}'.format(sample, str(valid_samples)))

rule cellranger_aggr:
    input:
        csv = rules.cellranger_aggr_csv.output
    output:
        summary = join(QUANT_INTERIM, 'aggregate', 'cellranger', 'outs', 'web_summary.html'),
        raw_h5 = join(QUANT_INTERIM, 'aggregate', 'cellranger', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(QUANT_INTERIM, 'aggregate', 'cellranger', 'outs','filtered_feature_bc_matrix.h5'),
        raw_mtx = join(QUANT_INTERIM, 'aggregate', 'cellranger','outs', 'raw_feature_bc_matrix', 'barcodes.tsv.gz'),
        filt_mtx = join(QUANT_INTERIM, 'aggregate', 'cellranger', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    params:
        outdir = join(QUANT_INTERIM, 'aggregate'),
        id = 'cellranger',
        norm = config['quant']['aggregate'].get('norm', 'none')
    threads:
        48
    singularity:
        CR_CONF['docker']
    shell:
        'cellranger aggr '
        '--csv {input.csv} '
        '--id {params.id} '
        '--normalize={params.norm} '
        '--disable-ui '
        '--nosecondary '
        '--nopreflight '
        '--localcores={threads} && '
        'cp -r {params.id} {params.outdir}/ && '
        'rm -rf {params.id} '
        
rule cellranger_seurat_aggr:
    input:
        join(CR_INTERIM, '{sample}', 'outs','filtered_feature_bc_matrix')
    params:
        script = srcdir('scripts/cellranger_seurat.R')
    output:
        join(CR_PROCESSED, 'seurat', '{sample}', '{sample}.rds')
    singularity:
        'docker://flatberg/seurat:dev-3.0.1'
    shell:
        'Rscript {params.script} --input {input} --output {output}'

rule cellranger_scanpy_aggr:
    input:
        expand(rules.cellranger_quant.output.filt_h5, sample=SAMPLES)
    params:
        script = srcdir('scripts/cellranger_scanpy.py'),
        org = config['organism']
    output:
        join(QUANT_INTERIM, 'aggregate', 'cellranger', 'scanpy', 'scanpy_aggr.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4'
    shell:
        'python {params.script} {input} -o {output} -v -f cellranger --normalize mapped --genome {params.org}'

rule cellranger_aggr_scanpy:
    input:
        rules.cellranger_aggr.output.filt_h5
    params:
        script = srcdir('scripts/cellranger_scanpy.py'),
        org = config['organism'],
        norm = config['quant']['aggregate']['norm']
    output:
        join(QUANT_INTERIM, 'aggregate', 'cellranger', 'scanpy', 'cellranger_aggr.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4'
    shell:
        'python {params.script} '
        '{input} '
        '-o {output} '
        '-f cellranger_aggr '
        '--genome {params.org} '
        '--normalize {params.norm} '
        '-v '
        
rule cellranger_scanpy_convert:
    input:
        join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix.h5')
    params:
        script = srcdir('scripts/cellranger_scanpy.py'),
        org = config['organism']
    output:
        join(CR_INTERIM, '{sample}', 'scanpy', 'adata.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4'
    shell:
        'python {params.script} {input} -o {output} -v -f cellranger --genome {params.org}'

