#-*- mode:snakemake -*-

extra_conf_fn = srcdir('cellranger.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

include:
    'cellranger.db'

#config
FASTQ_DIR = config.get('fastq_dir', 'data/raw/fastq')
CR_PROCESSED = join(PROCESSED_DIR, 'cellranger')
REF = config['quant']['reference']

def get_fastq(wildcards):
    return join(FASTQ_DIR, config['samples'][wildcards.sample]['R1'])

def get_aggr_mol(wildcards):
    samples = CR_AGGR[wildcards.group]
    DIR = join(CR_INTERIM, ORG, REF)
    mol_files = expand(join(DIR, '{sample}', 'outs', 'molecule_info.h5'), sample=samples)
    return mol_files

rule cellranger_count:
    input:
        fastq = get_fastq,
        transcriptome = join(CR_EXT, 'reference', ORG, REF, 'reference.json')
    params:
        input = FASTQ_DIR,
        id = '{sample}',
        outdir = join(CR_INTERIM, ORG, REF),
        sample = '{sample}',
        transcriptome = join(CR_EXT, 'reference', ORG, REF),
        ncells = 1000
    threads:
        8
    output:
        summary = join(CR_INTERIM, ORG, REF, '{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join(CR_INTERIM, ORG, REF, '{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(CR_INTERIM, ORG, REF, '{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join(CR_INTERIM, ORG, REF, '{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = directory(join(CR_INTERIM, ORG, REF, '{sample}', 'outs', 'raw_feature_bc_matrix')),
        filt_mtx = directory(join(CR_INTERIM, ORG, REF, '{sample}', 'outs', 'filtered_feature_bc_matrix'))
    singularity:
        CR_DOCKER
    shell:
        'cellranger count '
        '--fastqs {params.input} '
        '--id {params.id} '
        '--sample {params.sample} '
        '--transcriptome {params.transcriptome} '
        '--expect-cells {params.ncells} '
        '--localcores {threads} '
        '--chemistry SC3Pv2'
        '&& mv {params.id} {params.outdir}'


rule cellranger_aggr_csv:
    input:
        get_aggr_mol
    output:
        join(CR_INTERIM, '{group}_aggr.csv')
    shell:
        ''
        
rule cellranger_aggr:
    input:
        csv = rules.cellranger_aggr_csv.output
    shell:
        'cellranger aggr '
        '--csv {input.csv} '
        '--id {group} '
        '--normalize=mapped '

rule seurat_load:
    input:
        expand(join(CR_INTERIM, ORG, REF, '{sample}', 'outs','filtered_feature_bc_matrix'), sample=SAMPLES)
    params:
        script = srcdir('scripts/seurat_load.R')
    output:
        join(CR_PROCESSED, 'seurat', '{sample}', 'sdata.rds')
    singularity:
        'docker://flatberg/seurat:dev-3.0.1'
    shell:
        'Rscript {params.script} --input {input} --output {output}'

rule scanpy_load:
    input:
        rules.cellranger_count.output.filt_h5
    params:
        script = srcdir('scripts/scanpy_load.py'),
        genome = '--genome {}'.format(config['scanpy']['genome']) if 'scanpy' in config else ''
    output:
        join(CR_PROCESSED, 'scanpy', '{sample}', 'data.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.3.4'
    shell:
        'python {params.script} -i {input} -o {output} {params.genome} '
