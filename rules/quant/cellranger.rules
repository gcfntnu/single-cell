#-*- mode:snakemake -*-

extra_conf_fn = srcdir('cellranger.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

#config
ORG = config.get('organism', 'homo_sapiens')
FASTQ_DIR = config.get('fastq_dir', 'data/raw/fastq')
FASTQS_REL_PATH = config.get('fastqs_rel_path')
CR_PROCESSED = join(QUANT_PROCESSED, 'cellranger')
CR_INTERIM = join(QUANT_INTERIM, 'cellranger')
CR_CONF = config.get('cellranger')
REF = config['quant']['reference']


def get_aggr_mol(wildcards):
    #samples = CR_AGGR[wildcards.group]
    #quick fix - NOT OK
    samples = expand('{g}_{s}',g=wildcards.group,s=['A','B'])
    mol_files = expand(join(CR_INTERIM, '{sample}', 'outs', 'molecule_info.h5'), sample=samples)
    return mol_files

rule cellranger_count:
    input:
        R1 = get_filtered_fastq_R1,
        R2 = get_filtered_fastq_R2,
        transcriptome = join(EXT_DIR, REF, 'reference.json')
    params:
        input = rules.fastp_10x.params.out if not config['filter']['skip'] else join(FASTQ_DIR,FASTQS_REL_PATH,'{sample}'), 
        id = '{sample}',
        outdir = CR_INTERIM,
        sample = '{sample}',
        transcriptome = join(EXT_DIR, REF),
        ncells = 8500
    threads:
        48
    output:
        summary = join('{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join('{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join('{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join('{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = directory(join('{sample}', 'outs', 'raw_feature_bc_matrix')),
        filt_mtx = directory(join('{sample}', 'outs', 'filtered_feature_bc_matrix'))
    singularity:
        CR_CONF['docker']
    benchmark:
        'benchmark/cellranger/{sample}-cellranger-count.txt'
    shell:
        'rm -rf {params.id} && '
        'cellranger count '
        '--fastqs {params.input} '
        '--id {params.id} '
        '--sample {params.sample} '
        '--transcriptome {params.transcriptome} '
        '--expect-cells {params.ncells} '
        '--disable-ui '
        '--localcores {threads} '

rule move_cellranger:
    input:
        rules.cellranger_count.output.summary,
        rules.cellranger_count.output.raw_h5, 
        rules.cellranger_count.output.filt_h5,
        rules.cellranger_count.output.mol_h5,
        rules.cellranger_count.output.raw_mtx, 
        rules.cellranger_count.output.filt_mtx
    output:
        summary = join(CR_INTERIM, '{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join(CR_INTERIM, '{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join(CR_INTERIM, '{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = directory(join(CR_INTERIM, '{sample}', 'outs', 'raw_feature_bc_matrix')),
        filt_mtx = directory(join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix'))
    params:
        outdir = CR_INTERIM,
        sample = '{sample}',
    threads:
        1
    shell:
        'cp -r {params.sample} {params.outdir} && '
        'rm -rf {params.sample} '
         


"""
rule cellranger_aggr_csv:
    input: 
        get_aggr_mol
    output:
        join(CR_INTERIM, '{group}_aggr.csv')
    run:
        with open(output[0],'w') as aggr:
            aggr.write("library_id,molecule_h5\n")
            for sample in input:
                aggr.write(','.join([sample.split('/')[-3],'{}\n'.format(sample)])) 
        
rule cellranger_aggr:
    input:
        #csv =join(CR_INTERIM, '{group}_aggr.csv') 
        csv = rules.cellranger_aggr_csv.output
    output:
        summary = join(CR_INTERIM, '{group}', 'outs', 'web_summary.html'),
        raw_h5 = join(CR_INTERIM, '{group}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(CR_INTERIM, '{group}', 'outs', 'filtered_feature_bc_matrix.h5'),
        raw_mtx = directory(join(CR_INTERIM, '{group}', 'outs', 'raw_feature_bc_matrix')),
        filt_mtx = directory(join(CR_INTERIM, '{group}', 'outs', 'filtered_feature_bc_matrix'))
    params:
        outdir = CR_INTERIM,
        id = '{group}'
    threads:
        12
    singularity:
        CR_CONF['docker']
    shell:
        'cellranger aggr '
        '--csv {input.csv} '
        '--id {params.id} '
        '--normalize=mapped '
        '--disable-ui '
        '--localcores={threads} && '
        'cp -r {params.id} {params.outdir} && '
        'rm -rf {params.id} '
"""
rule cellranger_seurat:
    input:
        join(CR_INTERIM, '{sample}', 'outs','filtered_feature_bc_matrix')
    params:
        script = srcdir('scripts/cellranger_seurat.R')
    output:
        join(CR_PROCESSED, 'seurat', '{sample}', '{sample}.rds')
    singularity:
        'docker://flatberg/seurat:dev-3.0.1'
    shell:
        'Rscript {params.script} --input {input} --output {output}'

rule cellranger_scanpy:
    input:
        join(CR_INTERIM, '{sample}', 'outs','filtered_feature_bc_matrix')
    params:
        script = srcdir('scripts/cellranger_scanpy.py'),
        genome = '--genome {}'.format(config['scanpy']['genome']) if 'scanpy' in config else ''
    output:
        join(CR_PROCESSED, 'scanpy', '{sample}', '{sample}.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.3.7'
    shell:
        'python {params.script} -i {input} -o {output} {params.genome} '
