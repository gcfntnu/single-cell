#-*- mode:snakemake -*-

import os
import re
import six
from collections import defaultdict

from snakemake import logger

extra_conf_fn = srcdir('cellranger.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

#config
ORG = config.get('organism', 'homo_sapiens')
CR_PROCESSED = join(QUANT_PROCESSED, 'cellranger')
CR_INTERIM = join(QUANT_INTERIM, 'cellranger')
CR_CONF = config['quant']['cellranger']
AGGR = not config['quant']['aggregate']['skip']
if AGGR:
    AGGR_IDS = defaultdict(list)
    groupby = config['quant']['aggregate'].get('groupby', 'all_samples')
    for k, v in config['samples'].items():
        if groupby in v:
            aggr_id = v[groupby]
            AGGR_IDS[aggr_id].append(k)
        elif groupby == 'all_samples':
            AGGR_IDS['all_samples'].append(k)
        else:
            raise ValueError

if not '10xgenomics' in REF_DIR:
    CR_REF_DIR = join(REF_DIR, 'cellranger')
else:
    CR_REF_DIR = REF_DIR

def input_fastq_path(wildcards, input):
    pths = set()
    if isinstance(input.R1, six.string_types):
        R1 = [input.R1]
    else:
        R1 = input.R1
    for r1 in R1:
        pth, bn = os.path.split(r1)
        pths.add(pth)
    return ','.join(list(pths))

rule cellranger_gtf:
    input:
        gtf = join(REF_DIR, 'genes', 'genes.gtf')
    output:
        gtf = join(REF_DIR, 'genes', 'genes.gtf.filtered')
    params:
        ' '.join('--attribute=gene_biotype:{}'.format(bt) for bt in CR_CONF['mkgtf']['gene_biotype'])
    singularity:
        CR_CONF['docker']
    shell:
        'cellranger mkgtf {input} {output} {params}'

rule cellranger_mkref:
    input:
         fasta = join(REF_DIR, 'fasta', 'genome.fa'),
         gtf = join(REF_DIR, 'genes', 'genes.gtf')
    params:
        out_name = config['db']['10xgenomics']['version'][config['organism']],
        out_dir = join(REF_DIR, 'cellranger')
    output:
        join(CR_REF_DIR, 'reference.json'),
        join(CR_REF_DIR, 'fasta', 'genome.fa'),
        join(CR_REF_DIR, 'genes', 'genes.gtf')
    threads:
        48
    singularity:
        CR_CONF['docker']
    shell:
        'cellranger mkref '
        '--fasta {input.fasta} '
        '--genes {input.gtf} '
        '--nthreads {threads} '
        '--genome {params.out_name} '
        '&& cp -r {params.out_name}/* {params.out_dir}/ '
        '&& rm -rf {params.out_name} '
 
rule cellranger_quant_:
    input:
        R1 = get_filtered_fastq_R1,
        R2 = get_filtered_fastq_R2,
        genome = join(CR_REF_DIR, 'fasta', 'genome.fa')
    params:
        input = input_fastq_path,
        id = '_tmp_{sample}',
        sample = '{sample}',
        genome_dir = CR_REF_DIR,
        ncells = config['quant']['cellranger']['ncells'],
        chemistry = LIBPREP['cellranger']['chemistry'],
        extra_args = '--nopreflight --disable-ui '
    threads:
        48
    output:
        summary = join('_tmp_{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join('_tmp_{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join('_tmp_{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join('_tmp_{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = join('_tmp_{sample}', 'outs', 'raw_feature_bc_matrix', 'barcodes.tsv.gz'),
        filt_mtx = join('_tmp_{sample}', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    singularity:
        CR_CONF['docker']
    benchmark:
        'benchmark/cellranger/{sample}-cellranger-count.txt'
    shell:
        'rm -rf {params.id} && '
        'cellranger count '
        '--localcores {threads} '
        '--fastqs {params.input} '
        '--id {params.id} '
        '--sample {params.sample} '
        '--transcriptome {params.genome_dir} '
        '--expect-cells {params.ncells} '
        '--chemistry {params.chemistry} '
        '{params.extra_args} '

rule cellranger_quant:
    input:
        rules.cellranger_quant_.output.summary,
        rules.cellranger_quant_.output.raw_h5, 
        rules.cellranger_quant_.output.filt_h5,
        rules.cellranger_quant_.output.mol_h5,
        rules.cellranger_quant_.output.raw_mtx, 
        rules.cellranger_quant_.output.filt_mtx
    output:
        summary = join(CR_INTERIM, '{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join(CR_INTERIM, '{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join(CR_INTERIM, '{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = join(CR_INTERIM, '{sample}', 'outs', 'raw_feature_bc_matrix', 'barcodes.tsv.gz'),
        filt_mtx = join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    params:
        outdir = join(CR_INTERIM, '{sample}'),
        id = '_tmp_{sample}'
    threads:
        1
    shell:
        'cp -r {params.id}/* {params.outdir} && '
        'rm -rf {params.id} '

rule cellranger_aggr_csv:
    input:
        sample_info = 'data/processed/sample_info.txt',
        mol_h5 = expand(rules.cellranger_quant.output.mol_h5, sample=SAMPLES)
    params:
        script = srcdir('scripts/cellranger_aggr_csv.py'),
        groupby = config['quant']['aggregate'].get('groupby', 'all_samples'),
        outdir = join(QUANT_INTERIM, 'aggregate', 'description')
    output:
        expand(join(QUANT_INTERIM, 'aggregate', 'description', '{aggr_id}_aggr.csv'), aggr_id=AGGR_IDS.keys())
    shell:
        'python {params.script} '
        '{input.mol_h5} '
        '--outdir {params.outdir} '
        '--sample-info {input.sample_info} '
        '--groupby {params.groupby} '
        '--verbose '
        
rule cellranger_aggr:
    input:
        csv = join(QUANT_INTERIM, 'aggregate', 'description', '{aggr_id}_aggr.csv')
    output:
        summary = join(QUANT_INTERIM, 'aggregate', 'cellranger', '{aggr_id}', 'outs', 'web_summary.html'),
        raw_h5 = join(QUANT_INTERIM, 'aggregate', 'cellranger', '{aggr_id}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(QUANT_INTERIM, 'aggregate', 'cellranger', '{aggr_id}', 'outs','filtered_feature_bc_matrix.h5'),
        raw_mtx = join(QUANT_INTERIM, 'aggregate', 'cellranger', '{aggr_id}','outs', 'raw_feature_bc_matrix', 'barcodes.tsv.gz'),
        filt_mtx = join(QUANT_INTERIM, 'aggregate', 'cellranger', '{aggr_id}', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    params:
        outdir = join(QUANT_INTERIM, 'aggregate', 'cellranger'),
        id = '{aggr_id}',
        norm = config['quant']['aggregate'].get('norm', 'none')
    threads:
        48
    singularity:
        CR_CONF['docker']
    shell:
        'cellranger aggr '
        '--csv {input.csv} '
        '--id {params.id} '
        '--normalize={params.norm} '
        '--disable-ui '
        '--nopreflight '
        '--localcores={threads} && '
        'cp -r {params.id} {params.outdir}/ && '
        'rm -rf {params.id} '

rule cellranger_aggr_bam:
    input:
        csv = join(QUANT_INTERIM, 'aggregate', 'description', '{aggr_id}_aggr.csv')
    output:
        bam = join(QUANT_INTERIM, 'aggregate', 'cellranger', '{aggr_id}', 'outs', 'possorted_genome_bam.bam')
    params:
        script = srcdir('scripts/cellranger_merge_bam.py')
    threads:
        8
    singularity:
        'docker://gcfntnu/sambamba:0.7'
    shell:
        'python {params.script} {input} {output}'

rule cellranger_aggr_scanpy:
    input:
        rules.cellranger_aggr.output.filt_h5
    params:
        script = srcdir('scripts/convert_scanpy.py'),
        norm = config['quant']['aggregate']['norm']
    output:
        join(QUANT_INTERIM, 'aggregate', 'cellranger', 'scanpy', '{aggr_id}_aggr.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4.4'
    shell:
        'python {params.script} '
        '{input} '
        '-o {output} '
        '-f cellranger_aggr '
        '--normalize {params.norm} '
        '--identify-doublets '
        '-v '

rule cellranger_aggr_scanpy2:
    input:
        expand(rules.cellranger_aggr_scanpy.output, aggr_id=AGGR_IDS.keys())
        
rule cellranger_scanpy_convert:
    input:
        join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix.h5')
    params:
        script = srcdir('scripts/convert_scanpy.py'),
        genome_name  = config['db']['10xgenomics']['version'][config['organism']]
    output:
        join(CR_INTERIM, '{sample}', 'scanpy', 'adata.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4.4'
    shell:
        'python {params.script} {input} -o {output} -v -f cellranger'
        
        
