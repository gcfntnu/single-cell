#-*- mode:snakemake -*-

import os

extra_conf_fn = srcdir('cellranger.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

#config
ORG = config.get('organism', 'homo_sapiens')
FASTQ_DIR = config.get('fastq_dir', 'data/raw/fastq')
FASTQS_REL_PATH = config.get('fastqs_rel_path','')
CR_PROCESSED = join(QUANT_PROCESSED, 'cellranger')
CR_INTERIM = join(QUANT_INTERIM, 'cellranger')
CR_CONF = config['quant']['cellranger']
REF = config['quant']['reference']

def get_aggr_mol(wildcards):
    #samples = CR_AGGR[wildcards.group]
    #quick fix - NOT OK
    samples = expand('{g}_{s}',g=wildcards.group,s=['A','B'])
    mol_files = expand(join(CR_INTERIM, '{sample}', 'outs', 'molecule_info.h5'), sample=samples)
    return mol_files

rule cellranger_count:
    input:
        R1 = get_filtered_fastq_R1,
        R2 = get_filtered_fastq_R2,
        transcriptome = join(EXT_DIR, REF, 'reference.json')
    params:
        input = rules.fastp_10x.params.out if not config['filter']['skip'] else join(FASTQ_DIR, FASTQS_REL_PATH, '{sample}'), 
        id = '{sample}',
        outdir = CR_INTERIM,
        sample = '{sample}',
        transcriptome = join(EXT_DIR, REF),
        ncells = config['quant']['cellranger']['ncells']
    threads:
        48
    output:
        summary = join('{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join('{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join('{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join('{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = directory(join('{sample}', 'outs', 'raw_feature_bc_matrix')),
        filt_mtx = directory(join('{sample}', 'outs', 'filtered_feature_bc_matrix'))
    singularity:
        CR_CONF['docker']
    benchmark:
        'benchmark/cellranger/{sample}-cellranger-count.txt'
    shell:
        'rm -rf {params.id} && '
        'cellranger count '
        '--fastqs {params.input} '
        '--id {params.id} '
        '--sample {params.sample} '
        '--transcriptome {params.transcriptome} '
        '--expect-cells {params.ncells} '
        '--disable-ui '
        '--localcores {threads} '

rule cellranger_quant:
    input:
        rules.cellranger_count.output.summary,
        rules.cellranger_count.output.raw_h5, 
        rules.cellranger_count.output.filt_h5,
        rules.cellranger_count.output.mol_h5,
        rules.cellranger_count.output.raw_mtx, 
        rules.cellranger_count.output.filt_mtx
    output:
        summary = join(CR_INTERIM, '{sample}', 'outs', 'web_summary.html'),
        raw_h5 = join(CR_INTERIM, '{sample}', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix.h5'),
        mol_h5 = join(CR_INTERIM, '{sample}', 'outs', 'molecule_info.h5'),
        raw_mtx = directory(join(CR_INTERIM, '{sample}', 'outs', 'raw_feature_bc_matrix')),
        filt_mtx = directory(join(CR_INTERIM, '{sample}', 'outs', 'filtered_feature_bc_matrix'))
    params:
        outdir = CR_INTERIM,
        sample = '{sample}',
    threads:
        1
    shell:
        'cp -r {params.sample} {params.outdir} && '
        'rm -rf {params.sample} '

rule cellranger_aggr_csv:
    input:
        sample_info = 'data/processed/sample_info.txt',
        mol_h5 = expand(rules.cellranger_quant.output.mol_h5, sample=SAMPLES)
    output:
        csv = join(CR_INTERIM, 'aggr.csv')
    run:
        import pandas as pd
        batch = CR_CONF['aggregate'].get('batch')
        df = pd.read_csv(input.sample_info, sep='\t')
        df.index = df['Sample_ID']
        valid_samples = list(df['Sample_ID'])
        with open(output.csv, 'w') as aggr:
            if batch is not None:
                assert(batch in df.columns)
                aggr.write('library_id,molecule_h5,batch\n')
            else:
                aggr.write('library_id,molecule_h5\n')
            for mol_h5 in input.mol_h5:
                sample = mol_h5.split(os.path.sep)[-3]
                if sample in valid_samples:
                    if batch is not None:
                        aggr.write('{},{},{}\n'.format(sample, mol_h5, df.loc[sample][batch]))
                    else:
                        aggr.write('{},{}\n'.format(sample, mol_h5)) 
                else:
                    logger.error('{} not in {}'.format(sample, str(valid_samples)))

rule cellranger_aggr:
    input:
        csv = rules.cellranger_aggr_csv.output
    output:
        summary = join(QUANT_INTERIM, 'aggregate', 'cellranger', 'outs', 'web_summary.html'),
        raw_h5 = join(QUANT_INTERIM, 'aggregate', 'cellranger', 'outs', 'raw_feature_bc_matrix.h5'),
        filt_h5 = join(QUANT_INTERIM, 'aggregate', 'cellranger', 'outs','filtered_feature_bc_matrix.h5'),
        raw_mtx = directory(join(QUANT_INTERIM, 'aggregate', 'cellranger','outs', 'raw_feature_bc_matrix')),
        filt_mtx = directory(join(QUANT_INTERIM, 'aggregate', 'cellranger', 'outs', 'filtered_feature_bc_matrix'))
    params:
        outdir = join(QUANT_INTERIM, 'aggregate'),
        id = 'cellranger',
        norm = CR_CONF['aggregate'].get('norm', 'none')
    threads:
        48
    singularity:
        CR_CONF['docker']
    shell:
        'cellranger aggr '
        '--csv {input.csv} '
        '--id {params.id} '
        '--normalize={params.norm} '
        '--disable-ui '
        '--nosecondary '
        '--nopreflight '
        '--localcores={threads} && '
        'cp -r {params.id} {params.outdir}/ && '
        'rm -rf {params.id} '
        
rule cellranger_seurat_aggr:
    input:
        join(CR_INTERIM, '{sample}', 'outs','filtered_feature_bc_matrix')
    params:
        script = srcdir('scripts/cellranger_seurat.R')
    output:
        join(CR_PROCESSED, 'seurat', '{sample}', '{sample}.rds')
    singularity:
        'docker://flatberg/seurat:dev-3.0.1'
    shell:
        'Rscript {params.script} --input {input} --output {output}'

rule cellranger_scanpy_aggr:
    input:
        expand(rules.cellranger_quant.output.summary, sample=SAMPLES) if CR_CONF['aggregate']['skip'] else rules.cellranger_aggr.output.filt_mtx
    params:
        script = srcdir('scripts/cellranger_scanpy.py'),
        genome = '--genome {}'.format(config['scanpy']['genome']) if 'scanpy' in config else '',
        samples = ','.join(SAMPLES) if CR_CONF['aggregate']['skip'] else 'aggr'
    output:
        join(CR_PROCESSED, 'scanpy', 'adata2.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4'
    shell:
        'python {params.script} {input} -o {output} {params.genome} --samples {params.samples} '
