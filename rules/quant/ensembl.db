#-*- mode:snakemake -*-
from os.path import join
import string

# config
ENSEMBL_EXT = join(EXT_DIR, 'ensembl')
ORG = config.get('organism', 'homo_sapiens')
DB_CONF = config.get('ensembl', {})
ASSEMBLY = DB_CONF.get('assembly', 'primary_assembly')
ENS_RELEASE = DB_CONF.get('ensembl_release', '92')
ENS_VER = DB_CONF.get('ensembl_version', 'GRCh38')
if ORG == 'homo_sapiens':
    ENS_NAME = '' if ENS_VER == 'GRCh38' else '/grch37'
else:
    ENS_NAME = ''
TRANSCRIPTOME_TYPE = DB_CONF.get('transcriptome_type') #['prebuilt', 'all', 'chr', 'pri']
PROTOCOL = DB_CONF.get('protocol', 'http')

# includes
include:
    'ercc.db'

# ENSEMBL URLS 
if ASSEMBLY == 'primary_assembly' or ASSEMBLY == 'primary':
    GENOME = '{}://ftp.ensembl.org/pub{}/release-{}/fasta/{}/dna/{}.{}.dna.primary_assembly.fa.gz'
    GENOME = GENOME.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER)
    GTF = '{}://ftp.ensembl.org/pub{}/release-{}/gtf/{}/{}.{}.{}.gtf.gz'
    GTF = GTF.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER, ENS_RELEASE)
elif ASSEMBLY == 'all':
    GENOME = '{}://ftp.ensembl.org/pub{}/release-{}/fasta/{}/dna/{}.{}.dna.toplevel.fa.gz'
    GENOME = GENOME.format(ROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER)
    GTF = '{}://ftp.ensembl.org/pub{}/release-{}/gtf/{}/{}.{}.{}.chr_patch_hapl_scaff.gtf.gz'
    GTF = GTF.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER, ENS_RELEASE)
elif ASSEMBLY == 'chr':
    GENOME = '{}://ftp.ensembl.org/pub{}/release-{}/gtf/{}/{}.{}.{}.chr.gtf.gz'
    GENOME = GENOME.format(ROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER, ENS_RELEASE)
    GTF = '{}://ftp.ensembl.org/pub{}/release-{}/gtf/{}/{}.{}.{}.chr.gtf.gz'
    GTF = GTF.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER, ENS_RELEASE)
else:
    raise ValueError('ASSEMBLY option needs to be one of : primary, all, chr')

ENS_TRANSCRIPTOME = '{}://ftp.ensembl.org/pub{}/release-{}/fasta/{}/cdna/{}.{}.cdna.all.fa.gz'
ENS_TRANSCRIPTOME = ENS_TRANSCRIPTOME.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER)
ENS_NONCODING = '{}://ftp.ensembl.org/pub{}/release-{}/fasta/{}/ncrna/{}.{}.ncrna.fa.gz'
ENS_NONCODING = ENS_NONCODING.format(PROTOCOL, ENS_NAME, ENS_RELEASE, ORG, string.capwords(ORG), ENS_VER)

rule ensembl_dna:
    output:
        join(ENSEMBL_EXT, GENOME.split('/')[-1].split('.gz')[0])
    params: 
        url = GENOME
    threads: 
        32
    log:
        'logs/ensembl.genome.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule ensembl_cdna:
    params: 
        url = ENS_TRANSCRIPTOME
    output:
        join(ENSEMBL_EXT, ENS_TRANSCRIPTOME.split('/')[-1].split('.gz')[0])
    threads: 
        32
    log:
        'logs/ensembl.cdna.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule ensembl_noncoding:
    params:
        url = ENS_NONCODING
    output:
        join(ENSEMBL_EXT, ENS_NONCODING.split('/')[-1].split('.gz')[0])
    threads:
        32
    log:
        'logs/ensembl.noncoding.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'
        
rule ensembl_gtf:
    params: 
        url = GTF
    output: 
        join(ENSEMBL_EXT, GTF.split('/')[-1].split('.gz')[0])    
    threads:
        32
    log:
        'logs/ensembl.gtf.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule ensembl_addercc2genome:
    input:
        rules.ensembl_dna.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.ensembl_dna.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule ensembl_add_ercc2cdna:
    input:
        rules.ensembl_cdna.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.ensembl_cdna.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule ensembl_add_ercc2noncoding:
    input:
        rules.ensembl_noncoding.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.ensembl_noncoding.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule ensembl_add_ercc2gtf:
    input:
        rules.ensembl_gtf.output,
        rules.ercc_gtf.output
    output:
        rules.ensembl_gtf.output[0].split('.gtf')[0] + '.ERCC92.gtf'
    shell:
        'cat {input} > {output}'
   
ERCC = config.get('ercc', False)
rule ensembl_all:
    input:
        genome = rules.ensembl_add_ercc2genome.output if ERCC else rules.ensembl_dna.output,
        cdna = rules.ensembl_add_ercc2cdna.output if ERCC else rules.ensembl_cdna.output,
        noncoding = rules.ensembl_noncoding.output,
        gtf = rules.ensembl_add_ercc2gtf.output if ERCC else rules.ensembl_gtf.output,
    output:
        genome = join(ENSEMBL_EXT, 'genome.fa'),
        cdna = join(ENSEMBL_EXT, 'cdna.fa'),
        gtf = join(ENSEMBL_EXT, 'genes.gtf'),
        noncoding = join(ENSEMBL_EXT, 'ncdna.fa')
    shell:
        """
        ln {input.genome} {output.genome}
        ln {input.cdna} {output.cdna}
        ln {input.gtf} {output.gtf}
        ln {input.noncoding} {output.noncoding}
        """
