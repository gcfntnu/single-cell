#-*- mode:snakemake -*-
AVN_EXT = join(EXT_DIR, 'alevin')
ORG = config.get('organism', 'homo_sapiens')
AVN_DOCKER = CR_CONFIG.get('docker', 'docker://flatberg/alevin:dev0.12')

include:
    'ensembl.db'
include:
    'gencode.db'
include:
    'cellranger.db'


rule alevin_custom_transcriptome:
    input:
        genome = join(CR_EXT, 'reference', ORG, '{reference_db}', 'fasta', 'genome.fa'),
        gtf = join(CR_EXT, 'reference', ORG, 'custom_{reference_db}', 'genes', 'genes.gtf')
    output:
        join(AVN_EXT, 'reference', ORG, 'custom_{reference_db}', 'fasta', 'transcriptome.fa')
    shell:
        'gffread '
        '-w {output} '
        '-g {input.genome} '
        '{input.gtf} '

rule alevin_transcriptome:
    input:
        cdna = join(EXT_DIR, '{reference_db}', 'cdna.fa')
    output:
        join(AVN_EXT, 'reference', ORG, '{reference_db}', 'fasta', 'transcriptome.fa')
    shell:
        'ln {input} {output}'
        
rule alevin_tgmap:
    shell:
    """
    bioawk -c gff '$feature=="transcript" {print $group}' <(gunzip -c gencode.v28.annotation.gtf.gz) | awk -F ' ' '{print substr($4,2,length($4)-3) "\t" substr($2,2,length($2)-3)}' - > txp2gene.tsv
    """
    
rule alevin_whitelist:

rule alevin_index:
    input:
        transcriptome = rules.alevin_transcriptome.output
    output:
        join(AVN_EXT, 'reference', ORG, '{reference_db}', 'salmon', 'refInfo.json')
    params:
        out = join(AVN_EXT, 'reference', ORG, '{reference_db}', 'salmon')
    threads:
        16
    shell:
        'salmon index '
        '--perfectHash '
        '--threads {threads} '
        '--index {params.out} '
        '--transcripts {input.transcriptome}'

