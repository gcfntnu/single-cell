import glob
import os


BFQ_INTERIM = join(INTERIM_DIR, 'singlecell', 'bfq')

rule bfq_exprs:
    input:
        aggr_h5ad = expand(rules.velocyto_merge_aggr.output, quant=['star'], aggr_id=AGGR_IDS),
        sample_h5ad = expand(rules.velocyto_merge.output, quant=['star'], sample=SAMPLES),
        mtx = expand(rules.starsolo_quant.output.mtx, sample=SAMPLES),
        features = expand(rules.starsolo_quant.output.genes, sample=SAMPLES),
        cells = expand(rules.starsolo_quant.output.barcodes, sample=SAMPLES),
    output:
        expand(join(BFQ_INTERIM, 'exprs', '{quant}', '{aggr_id}_aggr.h5ad'), quant=['star'], aggr_id=AGGR_IDS),
        expand(join(BFQ_INTERIM, 'exprs', '{quant}', '{sample}.h5ad'), quant=['star'], sample=SAMPLES),
        expand(join(BFQ_INTERIM, 'exprs', '{quant}', '{sample}_matrix.mtx'), quant=['star'], sample=SAMPLES),
        expand(join(BFQ_INTERIM, 'exprs', '{quant}', '{sample}_features.tsv'), quant=['star'], sample=SAMPLES),
        expand(join(BFQ_INTERIM, 'exprs', '{quant}', '{sample}_barcodes.tsv'), quant=['star'], sample=SAMPLES),
    run:
        for src, dst  in zip(input, output):
            shell('ln -sr {src} {dst}')

rule bfq_logs:
    input:
        summary = expand(rules.starsolo_quant.output.gene_summary, sample=SAMPLES),
        gene_stats = expand(rules.starsolo_quant.output.gene_stats, sample=SAMPLES),
        cell_stats = expand(rules.starsolo_quant.log.barcodes, sample=SAMPLES),
        star = expand(rules.starsolo_quant.log.star, sample=SAMPLES),
        umi_cell = expand(rules.starsolo_quant.log.umi_cell, sample=SAMPLES)
    output:
        expand(join(BFQ_INTERIM, 'logs', '{quant}', '{sample}_Summary.csv'), quant=['star'], sample=SAMPLES),
        expand(join(BFQ_INTERIM, 'logs', '{quant}', '{sample}_Features.stat'), quant=['star'], sample=SAMPLES),
        expand(join(BFQ_INTERIM, 'logs', '{quant}', '{sample}_Barcodes.stat'), quant=['star'], sample=SAMPLES),
        expand(join(BFQ_INTERIM, 'logs', '{quant}', '{sample}_Log.final.out'), quant=['star'], sample=SAMPLES),
        expand(join(BFQ_INTERIM, 'logs', '{quant}', '{sample}_UMIperCellSorted.txt'), quant=['star'], sample=SAMPLES)
    run:
        for src, dst  in zip(input, output):
            shell('ln -sr {src} {dst}')

rule bfq_aligned:
    input:
        bam = expand(rules.starsolo_quant.output.bam, sample=SAMPLES)
    output:
        bam = expand(join(BFQ_INTERIM, '{sample}_Aligned.sortedByCoord.out.bam'), sample=SAMPLES)
    run:
        for src, dst  in zip(input, output):
            shell('ln -sr {src} {dst}')

rule bfq_umap_png:
    input:
        expand(rules.velocyto_merge_aggr.output, quant=['star'], aggr_id=AGGR_IDS)
    output:
        expand(join(BFQ_INTERIM, 'figs', '{quant}', '{aggr_id}_mqc.png'), quant=['star'], aggr_id=AGGR_IDS)
    params:
        script = srcdir('scripts/plotpca.py')
    singularity:
        'docker://' + config['docker']['scanpy']
    run:
        for inn, out in zip(input, output):
            shell('python {params.script} {inn} -o {out}')
            
rule bfq_umap_yaml:
    input:
        expand(rules.velocyto_merge_aggr.output, quant=['star'], aggr_id=AGGR_IDS)
    output:
        expand(join(BFQ_INTERIM, 'figs', '{quant}', '{aggr_id}_mqc.yaml'), quant=['star'], aggr_id=AGGR_IDS)
    params:
        script = srcdir('scripts/plotpca.py')
    singularity:
        'docker://' + config['docker']['scanpy']
    run:
        for inn, out in zip(input, output):
            shell('python {params.script} {inn} -o {out}')

            
rule bfq_all:
    input:
        rules.bfq_exprs.output,
        rules.bfq_logs.output,
        rules.bfq_aligned.output,
        rules.bfq_umap_yaml.output,
        rules.bfq_umap_png.output
