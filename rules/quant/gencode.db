#-*-mode:snakemake-*-

import os
import string

# config
ORG = config.get('organism', 'homo_sapiens')
GENCODE_ORG = {'homo_sapiens':  'human', 'mus_musculus': 'mouse'}[ORG]
DB_CONF = config.get('gencode', {})
ASSEMBLY = DB_CONF.get('assembly', 'primary_assembly')
GENCODE_RELEASE = DB_CONF.get('gencode_release', 27)
GENCODE_VERSION = DB_CONF.get('gencode_version', 'GRCh38')
TRANSCRIPTOME_TYPE = DB_CONF.get('transcriptome_type') #['prebuilt', 'all', 'chr', 'pri']
PROTOCOL = DB_CONF.get('protocol', 'ftp')

# includes
if config.get('ercc'):
    include:
        'ercc.db'

# GENCODE URLS
if ASSEMBLY == 'primary_assembly' or ASSEMBLY == 'primary':
    GENOME = '{}://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{}/{}.primary_assembly.genome.fa.gz'
    GENOME = GENOME.format(PROTOCOL, GENCODE_ORG, GENCODE_RELEASE, GENCODE_VERSION)
    GTF = '{}://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{}/gencode.v{}.primary_assembly.annotation.gtf.gz'
    GTF = GTF.format(PROTOCOL, GENODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)
elif ASSEMBLY == 'all':
    GENOME = '{}://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{}/{}.p10.genome.fa.gz'
    GENOME = GENOME.format(PROTOCOL, GENCODE_ORG, GENCODE_RELEASE, GENCODE_VERSION)
    GTF = '{}://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{}/gencode.v{}.chr_patch_hapl_scaff.annotation.gtf.gz'
    GTF = GTF.format(PROTOCOL, GENODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)
else:
    raise ValueError('ASSEMBLY option needs to be one of : primary, all')
    
GENCODE_TRANSCRIPTOME = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{:}/gencode.v{:}.transcripts.fa.gz'
GENCODE_TRANSCRIPTOME = GENCODE_TRANSCRIPTOME.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)
GENCODE_LNC = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{}/gencode.v{}.lncRNA_transcripts.fa.gz'
GENCODE_LNC = GENCODE_LNC.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)

GENCODE_LNC_GTF = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{:d}/gencode.v{:d}.long_noncoding_RNAs.gtf.gz'
GENCODE_LNC_GTF = GENCODE_LNC_GTF.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)
GENCODE_PREDTRNA_GTF = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{:d}/gencode.v{:d}.tRNAs.gtf.gz'
GENCODE_PREDTRNA_GTF = GENCODE_PREDTRNA_GTF.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)
GENCODE_POLYA_GTF = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{:d}/gencode.v{:d}.polyAs.gtf.gz'
GENCODE_POLYA_GTF = GENCODE_POLYA_GTF.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)

rule gencode_dna_reference:
    output:
        join(EXTDIR, GENOME.split('/')[-1].split('.gz')[0])
    params: 
        url = GENOME
    threads: 
        32
    log:
        'logs/gencode.genome.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'
        
rule gencode_cdna_reference:
    params: 
        url = GENCODE_TRANSCRIPTOME
    output:
        join(EXTDIR, GENCODE_TRANSCRIPTOME.split('/')[-1].split('.gz')[0])
    threads: 
        32
    log:
        'logs/gencode.cdna.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'


rule gencode_noncoding_reference:
    params:
        url = GENCODE_LNC
    output:
        join(EXTDIR, GENCODE_LNC.split('/')[-1].split('.gz')[0])
    threads:
        32
    log:
        'logs/gencode.noncoding.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule gencode_gtf:
    params: 
        url = GTF
    output: 
        join(EXTDIR, GTF.split('/')[-1].split('.gz')[0])    
    threads:
        32
    log:
        'logs/gencode.gtf.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule gencode_addercc2genome:
    input:
        rules.gencode_dna.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.dna.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule gencode_add_ercc2cdna:
    input:
        rules.gencode_cdna.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.gencode_cdna.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule gencode_add_ercc2noncoding:
    input:
        rules.gencode_noncoding.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.gencode_noncoding.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule gencode_add_ercc2gtf:
    input:
        rules.gencode_gtf.output,
        rules.ercc_gtf.output
    output:
        rules.gencode_gtf.output[0].split('.gtf')[0] + '.ERCC92.gtf'
    shell:
        'cat {input} > {output}'
   
ERCC = config.get('ercc', False)
rule gencode_all:
    input:
        genome = rules.gencode_add_ercc2genome.output if ERCC else rules.gencode_dna.output,
        cdna = rules.add_ercc2cdna.output if ERCC else rules.gencode_cdna.output,
        noncoding = rules.noncoding.output,
        gtf = rules.add_ercc2gtf.output if ERCC else rules.gencode_gtf.output,
    output:
        genome = join(EXTDIR, 'genome.fa'),
        cdna = join(EXTDIR, 'cdna.fa'),
        gtf = join(EXTDIR, 'genes.gtf'),
        noncoding = join(EXTDIR, 'ncdna.fa')
    shell:
        """
        ln {input.genome} {output.genome}
        ln {input.cdna} {output.cdna}
        ln {input.gtf} {output.gtf}
        ln {input.noncoding} {output.noncoding}
