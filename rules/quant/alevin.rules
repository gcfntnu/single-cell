#-*- mode:snakemake -*-

extra_conf_fn = srcdir('alevin.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

#config
AVN_INTERIM = join(INTERIM_DIR, 'alevin')
AVN_PROCESSED = join(PROCESSED_DIR, 'alevin')
REF = config['quant']['reference']


rule alevin_10xgenomics_whitelist:
    input:
        join(INTERIM_DIR, '10xgenomics', REF, '{sample}', 'outs', 'filtered_feature_bc_matrix', 'barcodes.tsv.gz')
    output:
        join(AVN_INTERIM, 'whitelists', '{sample}', '10x_whitelist.txt')
    shell:
        'zcat {input} > {output}'
                     
rule alevin_quasi:
    input:
        R1 = get_filtered_fastq_R1,
        R2 = get_filtered_fastq_R2,
        ref = join(EXT_DIR, REF, 'salmon', 'refInfo.json'),
        t2g = join(EXT_DIR, REF, 'genes', 'txp2gene.tsv')
    params:
        args = '-l ISR --chromiumV3 --dumpCsvCounts',
        output = join(AVN_INTERIM, '{sample}'),
        ref = join(EXT_DIR, REF, 'salmon')
    threads:
        16
    singularity:
        'docker://flatberg/alevin:dev0.12'
    output:
        quant = join(AVN_INTERIM, '{sample}', 'alevin', 'quants_mat.gz'),
        csv = join(AVN_INTERIM, '{sample}', 'alevin', 'quants_mat.csv')
    shell:
        'salmon alevin '
        '{params.args} '
        '-i {params.ref} '
        '--tgMap {input.t2g} '
        '-1 {input.R1} '
        '-2 {input.R2} '
        '-p {threads} '
        '-o {params.output} '

rule alevin_seurat:
    input:
        join(AVN_INTERIM, '{sample}', 'alevin', 'quants_mat.csv')
    params:
        script = srcdir('scripts/alevin_seurat.R'),
        input_dir = join(AVN_INTERIM, '{sample}')
    output:
        join(AVN_PROCESSED, 'seurat', '{sample}', '{sample}.rds')
    singularity:
        'docker://flatberg/seurat:dev-3.0.1'
    shell:
        'Rscript {params.script} --input {params.input_dir} --output {output}'

rule alevin_scanpy:
    input:
        join(AVN_INTERIM, '{sample}', 'alevin', 'quants_mat.gz')
    params:
        script = srcdir('scripts/alevin_scanpy.py')
    output:
        join(AVN_PROCESSED, 'scanpy', '{sample}', '{sample}.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.3.4'
    shell:
        'python {params.script} -i {input} -o {output} '
