#-*- mode:snakemake -*-

extra_conf_fn = srcdir('alevin.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

#config
ORG = config.get('organism', 'homo_sapiens')
AVN_INTERIM = join(QUANT_INTERIM, 'alevin')
AVN_PROCESSED = join(QUANT_PROCESSED, 'alevin')
                     
rule alevin_quant:
    input:
        R1 = get_filtered_fastq_R1,
        R2 = get_filtered_fastq_R2,
        ref = join(REF_DIR, 'salmon', 'refInfo.json'),
        t2g = join(REF_DIR, 'genes', 'txp2gene.tsv')
    params:
        args = '-l ISR --chromiumV3 ',
        output = join(AVN_INTERIM, '{sample}'),
        ref = join(REF_DIR, 'salmon')
    threads:
        16
    singularity:
        'docker://gcfntnu/alevin:0.13.1'
    output:
        quant = join(AVN_INTERIM, '{sample}', 'alevin', 'quants_mat.gz'),
        csv = join(AVN_INTERIM, '{sample}', 'alevin', 'quants_mat.csv')
    shell:
        'salmon alevin '
        '{params.args} '
        '-i {params.ref} '
        '--tgMap {input.t2g} '
        '--forceCells 5000 '
        '-1 {input.R1} '
        '-2 {input.R2} '
        '-p {threads} '
        '-o {params.output} '

rule alevin_scanpy_convert:
    input:
        join(AVN_INTERIM, '{sample}', 'alevin', 'quants_mat.gz')
    params:
        script = srcdir('scripts/cellranger_scanpy.py')
    output:
        join(AVN_INTERIM, '{sample}', 'scanpy', 'adata.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4'
    shell:
        'python {params.script} {input} -v -f alevin -o {output} '

rule alevin_scanpy_aggr:
    input:
        mat = expand(rules.alevin_quant.output.csv, sample=SAMPLES)
    params:
        script = srcdir('scripts/cellranger_scanpy.py'),
        norm = config['quant']['aggregate']['norm']
    output:
        join(QUANT_INTERIM, 'aggregate', 'alevin', 'scanpy', 'scanpy_aggr.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4'
    shell:
        'python {params.script} '
        '{input.mat} '
        '-o {output} '
        '-f alevin '
        '--normalize {params.norm} '
        '-v '

rule alevin_qc:
    input:
        rules.alevin_quant.output
    params:
        input_dir = rules.alevin_quant.params.output,
        script = srcdir('scripts/alevinQC.R')
    output:
        html = join(AVN_INTERIM, '{sample}', 'alevinqc', 'qc_report.html')
    singularity:
        'docker://gcfntnu/alevinqc:0.1.1'
    shell:
        'Rscript {params.script} '
        '--input {params.input_dir} '
        '--output {output}'

rule alevin_seurat:
    input:
        rules.alevin_quant.output.csv
    params:
        script = srcdir('scripts/alevin_seurat.R'),
        input_dir = join(AVN_INTERIM, '{sample}')
    output:
        join(AVN_PROCESSED, 'seurat', '{sample}', '{sample}.rds')
    singularity:
        'docker://flatberg/seurat:dev-3.0.1'
    shell:
        'Rscript {params.script} --input {params.input_dir} --output {output}'
