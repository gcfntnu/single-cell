#-*- mode:snakemake -*-

extra_conf_fn = srcdir('star.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

#config
ORG = config.get('organism', 'homo_sapiens')
STAR_PROCESSED = join(QUANT_PROCESSED, 'star')
STAR_INTERIM = join(QUANT_INTERIM, 'star')
STAR_CONF = config['quant'].get('star', {})


def starsolo_R1(wildcards):
    return ','.join(get_filtered_fastq_R1(wildcards))

def starsolo_R2(wildcards):
    return ','.join(get_filtered_fastq_R2(wildcards))

if config['db']['reference_db'] != '10xgenomics': # 10x prebuilds
    rule starsolo_genome_index:
        input: 
            genome = join(REF_DIR, 'fasta', 'genome.fa'),
            gtf = join(REF_DIR, 'genes', 'genes.gtf')
        output:
             join(REF_DIR, 'star', 'SA')
        params:
            index_dir =  join(REF_DIR, 'star'),
            readlength = config.get('read_geometry', [28, 98])[-1]
        threads:
            48
        log:
            join(REF_DIR, 'logs', 'STAR.index.log')
        singularity:
            STAR_CONF['docker']
        shell:
            'STAR '
            '--runThreadN {threads} '
            '--runMode genomeGenerate '
            '--genomeDir {params.index_dir} '
            '--genomeFastaFiles {input.genome} '
            '--sjdbGTFfile {input.gtf} '
            '--sjdbOverhang {params.readlength} '

rule starsolo_quant:
    input:
        R1 = get_filtered_fastq_R1,
        R2 = get_filtered_fastq_R2,
        genome = join(REF_DIR, 'star', 'SA'),
        whitelist = join(EXT_DIR, '10xgenomics', 'whitelist.txt')
    params:
        outdir = join(STAR_INTERIM, '{sample}') + '/',
        genome_dir = join(REF_DIR, 'star'),
        cb_len = LIBPREP['starsolo']['cb_len'],
        umi_len = LIBPREP['starsolo']['umi_len'],
        R1 = starsolo_R1,
        R2 = starsolo_R2,
        extra_args = '--genomeLoad LoadAndKeep ' 
    threads:
        48
    output:
        barcodes = join(STAR_INTERIM, '{sample}', 'Solo.out', 'barcodes.tsv'),
        gene_stats = join(STAR_INTERIM, '{sample}', 'Solo.out', 'Gene.stats'),
        genes = join(STAR_INTERIM, '{sample}', 'Solo.out', 'genes.tsv'),
        feature_mtx = join(STAR_INTERIM, '{sample}', 'Solo.out', 'matrix.mtx'),
        bam = join(STAR_INTERIM, '{sample}', 'Aligned.sortedByCoord.out.bam')
    singularity:
        STAR_CONF['docker']
    benchmark:
        'benchmark/starsolo/{sample}-starsolo.txt'
    shell:
        'STAR --soloType Droplet '
        ' --readFilesCommand zcat '
        '--soloCBwhitelist {input.whitelist} '
        '--readFilesIn {params.R2} {params.R1} '
        '--genomeDir {params.genome_dir} '
        '--outFileNamePrefix {params.outdir} '
        '--soloCBlen {params.cb_len} '
        '--soloUMIlen {params.umi_len} '
        '--outSAMtype BAM SortedByCoordinate '
        '--outSAMattributes CR CY UR UY ' # add error corrected bc when avail (for velocyto)
        '--limitBAMsortRAM 24000000000' 
        '--runThreadN {threads} '
        '{params.extra_args} '

rule starsolo_clean_shmem:
    params:
        genome_dir = rules.starsolo_quant.params.genome_dir
    output:
        temp(touch(join(STAR_INTERIM, '.starsolo.mem.cleaned')))
    singularity:
        STAR_CONF['docker']    
    shell:
        'STAR --genomeDir {params.genome_dir} --genomeLoad Remove || echo "no shared mem"'

rule starsolo_scanpy_convert:
    input:
        mat = join(STAR_INTERIM, '{sample}', 'Solo.out', 'matrix.mtx'),
        mem_clean = rules.starsolo_clean_shmem.output
    params:
        script = srcdir('scripts/cellranger_scanpy.py')
    output:
        join(STAR_INTERIM, '{sample}', 'scanpy', 'adata.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4'
    shell:
        'python {params.script} {input.mat} -f star -o {output} -v '
 
rule starsolo_scanpy_aggr:
    input:
        mat = expand(rules.starsolo_quant.output.feature_mtx, sample=SAMPLES),
        mem_clean = rules.starsolo_clean_shmem.output
    params:
        script = srcdir('scripts/cellranger_scanpy.py'),
        norm = config['quant']['aggregate']['norm']
    output:
        join(QUANT_INTERIM, 'aggregate', 'star', 'scanpy', 'scanpy_aggr.h5ad')
    singularity:
        'docker://gcfntnu/scanpy:1.4'
    shell:
        'python {params.script} '
        '{input} '
        '-o {output} '
        '-f star '
        '--normalize {params.norm} '
        '-v '       

rule starsolo_bam_merge:
    input:
        expand(rules.starsolo_quant.output, sample=SAMPLES)
    output:
        join(QUANT_INTERIM, 'aggregate', 'star', 'sorted.bam')
    threads:
        48
    shell:
        'sambamba merge -t 8 {output} {input}'
